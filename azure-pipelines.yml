# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none
stages:
- stage: 'First_Stage'
  displayName: 'Welcome to infra deployment via Terraform'
  jobs:
    - job: 'Infra_Creation'
      displayName: 'Start running Terraform'
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: TerraformInstaller@1
          displayName: 'Terraform installation'
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: 'Terraform init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'RKConstructions-sc'
            backendAzureRmResourceGroupName: 'tfstate'
            backendAzureRmStorageAccountName: 'tfstate18571'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'sp=r&st=2023-07-06T21:04:46Z&se=2024-06-30T05:04:46Z&spr=https&sv=2022-11-02&sr=c&sig=TJa0icP%2FOqB8%2FckFCkVsZra23wpZUYq%2BPvf7vlX00fw%3D'
        - task: TerraformTaskV4@4
          displayName: 'Terraform validate'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

        - task: TerraformTaskV4@4
          displayName: 'Terraform plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            environmentServiceNameAzureRM: 'RKConstructions-sc'
        - task: TerraformTaskV4@4
          displayName: 'Terraform apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'RKConstructions-sc'



